"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[406],{1906:(e,i,l)=>{l.r(i),l.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>t,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"guides/setup","title":"Dev Setup","description":"Windows Setup","source":"@site/docs/guides/setup.mdx","sourceDirName":"guides","slug":"/guides/setup","permalink":"/Gump/guides/setup","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"setup","title":"Dev Setup","sidebar_label":"Dev Setup"},"sidebar":"guidesSidebar"}');var s=l(4848),d=l(8453);const t={id:"setup",title:"Dev Setup",sidebar_label:"Dev Setup"},r="Gump Setup Guide",c={},a=[{value:"Windows Setup",id:"windows-setup",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"1. Visual Studio 2022 Community Edition",id:"1-visual-studio-2022-community-edition",level:4},{value:"2. CMake (&gt;= 3.16)",id:"2-cmake--316",level:4},{value:"3. vcpkg",id:"3-vcpkg",level:4},{value:"4. Dependencies",id:"4-dependencies",level:4},{value:"Clone the project",id:"clone-the-project",level:3},{value:"Build Steps",id:"build-steps",level:3},{value:"1. Initialize and update git submodules (if not done while cloning the project)",id:"1-initialize-and-update-git-submodules-if-not-done-while-cloning-the-project",level:4},{value:"2. Create a build folder",id:"2-create-a-build-folder",level:4},{value:"3. Configure with CMake",id:"3-configure-with-cmake",level:4},{value:"4. Build the project",id:"4-build-the-project",level:4},{value:"Run",id:"run",level:3},{value:"Linux / WSL Setup",id:"linux--wsl-setup",level:2},{value:"Prerequisites",id:"prerequisites-1",level:3},{value:"1. Essential tools",id:"1-essential-tools",level:4},{value:"2. OpenGL development libraries",id:"2-opengl-development-libraries",level:4},{value:"Clone the project",id:"clone-the-project-1",level:3},{value:"Build Steps",id:"build-steps-1",level:3},{value:"1. Initialize and update git submodules (if not done while cloning the project)",id:"1-initialize-and-update-git-submodules-if-not-done-while-cloning-the-project-1",level:4},{value:"2. Create a build folder",id:"2-create-a-build-folder-1",level:4},{value:"3. Configure with CMake",id:"3-configure-with-cmake-1",level:4},{value:"4. Build the project",id:"4-build-the-project-1",level:4},{value:"Run",id:"run-1",level:3},{value:"Notes for WSL",id:"notes-for-wsl",level:3},{value:"Cross-Platform Build Script",id:"cross-platform-build-script",level:2}];function o(e){const i={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"gump-setup-guide",children:"Gump Setup Guide"})}),"\n",(0,s.jsx)(i.h2,{id:"windows-setup",children:"Windows Setup"}),"\n",(0,s.jsx)(i.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(i.h4,{id:"1-visual-studio-2022-community-edition",children:"1. Visual Studio 2022 Community Edition"}),"\n",(0,s.jsx)(i.p,{children:"During install, select:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"\u201cDesktop development with C++\u201d workload"}),"\n",(0,s.jsx)(i.li,{children:"CMake tools"}),"\n",(0,s.jsx)(i.li,{children:"Windows SDK (latest)"}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"2-cmake--316",children:"2. CMake (>= 3.16)"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-powershell",children:"winget install Kitware.CMake\n"})}),"\n",(0,s.jsx)(i.h4,{id:"3-vcpkg",children:"3. vcpkg"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-powershell",children:"# Clone & Bootstrap\ngit clone https://github.com/microsoft/vcpkg.git C:\\Dev\\vcpkg\nC:\\Dev\\vcpkg\\bootstrap-vcpkg.bat\n\n# Integrate vcpkg with CMake/VS\nC:\\Dev\\vcpkg\\vcpkg integrate install\n"})}),"\n",(0,s.jsx)(i.h4,{id:"4-dependencies",children:"4. Dependencies"}),"\n",(0,s.jsx)(i.p,{children:"Install GLFW3 via vcpkg:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-powershell",children:"C:\\Dev\\vcpkg\\vcpkg install glfw3:x64-windows\n\n# Or you can use the provided dependencies-windows.txt\nGet-Content dependencies-windows.txt | ForEach-Object { C:/Dev/vcpkg/vcpkg.exe install $_ }\n"})}),"\n",(0,s.jsx)(i.h3,{id:"clone-the-project",children:"Clone the project"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-powershell",children:"git clone --recurse-submodules https://github.com/JeanBizeul/Gump.git\ncd Gump\n"})}),"\n",(0,s.jsx)(i.h3,{id:"build-steps",children:"Build Steps"}),"\n",(0,s.jsxs)(i.admonition,{title:"Build scripts",type:"info",children:[(0,s.jsx)(i.p,{children:"You can use the script provided in scripts/ and do all of the build steps automatically"}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-powershell",children:"# Debug build\n./scripts/build-debug-windows.bat\n# Release build\n./scripts/build-release-windows.bat\n"})})]}),"\n",(0,s.jsx)(i.h4,{id:"1-initialize-and-update-git-submodules-if-not-done-while-cloning-the-project",children:"1. Initialize and update git submodules (if not done while cloning the project)"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-powershell",children:"git submodule init\ngit submodule update\n"})}),"\n",(0,s.jsx)(i.h4,{id:"2-create-a-build-folder",children:"2. Create a build folder"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-powershell",children:"mkdir build\ncd build\n"})}),"\n",(0,s.jsx)(i.h4,{id:"3-configure-with-cmake",children:"3. Configure with CMake"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-powershell",children:"cmake .. -DCMAKE_TOOLCHAIN_FILE=C:/Dev/vcpkg/scripts/buildsystems/vcpkg.cmake\n"})}),"\n",(0,s.jsx)(i.p,{children:"::: info If vcpkg is installed in a different location, adjust the path accordingly."}),"\n",(0,s.jsx)(i.p,{children:":::"}),"\n",(0,s.jsx)(i.h4,{id:"4-build-the-project",children:"4. Build the project"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-powershell",children:"cmake --build . --config Debug\n"})}),"\n",(0,s.jsx)(i.p,{children:"For release build:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-powershell",children:"cmake --build . --config Release\n"})}),"\n",(0,s.jsx)(i.h3,{id:"run",children:"Run"}),"\n",(0,s.jsxs)(i.p,{children:["The executable will be located in ",(0,s.jsx)(i.code,{children:"build/Debug/gump.exe"})," or ",(0,s.jsx)(i.code,{children:"build/Release/gump.exe"})," depending on the configuration."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-powershell",children:"# Debug build\n./Debug/gump.exe\n# Release build\n./Release/gump.exe\n"})}),"\n",(0,s.jsx)(i.hr,{}),"\n",(0,s.jsx)(i.h2,{id:"linux--wsl-setup",children:"Linux / WSL Setup"}),"\n",(0,s.jsx)(i.h3,{id:"prerequisites-1",children:"Prerequisites"}),"\n",(0,s.jsx)(i.h4,{id:"1-essential-tools",children:"1. Essential tools"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"sudo apt update\nxargs -a dependencies-linux.txt sudo apt install -y\n"})}),"\n",(0,s.jsx)(i.h4,{id:"2-opengl-development-libraries",children:"2. OpenGL development libraries"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"sudo apt install libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev libglfw3-dev\n"})}),"\n",(0,s.jsx)(i.h3,{id:"clone-the-project-1",children:"Clone the project"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"git clone --recurse-submodules https://github.com/JeanBizeul/Gump.git\ncd Gump\n"})}),"\n",(0,s.jsx)(i.h3,{id:"build-steps-1",children:"Build Steps"}),"\n",(0,s.jsxs)(i.admonition,{title:"Build scripts",type:"info",children:[(0,s.jsx)(i.p,{children:"You can use the script provided in scripts/ and do all of the build steps automatically"}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"# Debug build\n./scripts/build-debug-linux.sh\n# Release build\n./scripts/build-release-linux.sh\n"})})]}),"\n",(0,s.jsx)(i.h4,{id:"1-initialize-and-update-git-submodules-if-not-done-while-cloning-the-project-1",children:"1. Initialize and update git submodules (if not done while cloning the project)"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-powershell",children:"git submodule init\ngit submodule update\n"})}),"\n",(0,s.jsx)(i.h4,{id:"2-create-a-build-folder-1",children:"2. Create a build folder"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"mkdir -p build\ncd build\n"})}),"\n",(0,s.jsx)(i.h4,{id:"3-configure-with-cmake-1",children:"3. Configure with CMake"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"cmake .. -DCMAKE_BUILD_TYPE=Debug\n"})}),"\n",(0,s.jsx)(i.h4,{id:"4-build-the-project-1",children:"4. Build the project"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"cmake --build .\n"})}),"\n",(0,s.jsx)(i.h3,{id:"run-1",children:"Run"}),"\n",(0,s.jsxs)(i.p,{children:["The executable will be located in the ",(0,s.jsx)(i.code,{children:"build/"})," directory:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"./gump\n"})}),"\n",(0,s.jsxs)(i.admonition,{title:"Build options",type:"tip",children:[(0,s.jsxs)(i.p,{children:["Optionally, you can change ",(0,s.jsx)(i.code,{children:"CMAKE_BUILD_TYPE"})," to ",(0,s.jsx)(i.code,{children:"Release"})," for a release build:"]}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"cmake .. -DCMAKE_BUILD_TYPE=Release\ncmake --build .\n./gump\n"})})]}),"\n",(0,s.jsx)(i.h3,{id:"notes-for-wsl",children:"Notes for WSL"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"If using WSL2, ensure you have a working X server or WSLg enabled to run OpenGL applications."}),"\n",(0,s.jsx)(i.li,{children:"On headless setups without GPU forwarding, the program may compile but not display graphics."}),"\n"]}),"\n",(0,s.jsx)(i.hr,{}),"\n",(0,s.jsx)(i.h2,{id:"cross-platform-build-script",children:"Cross-Platform Build Script"}),"\n",(0,s.jsxs)(i.p,{children:["You can use the included ",(0,s.jsx)(i.strong,{children:"build script"})," to automate building and optionally running the app on both Windows and Linux/WSL."]}),"\n",(0,s.jsxs)(i.p,{children:["They are located under the ",(0,s.jsx)(i.code,{children:"/scripts"})," folder, you may need to use ",(0,s.jsx)(i.code,{children:"chmod"})," to be able to run them on Linux/WSL:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"chmod +x ./scripts/build-*-linux.sh\n"})})]})}function u(e={}){const{wrapper:i}={...(0,d.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,i,l)=>{l.d(i,{R:()=>t,x:()=>r});var n=l(6540);const s={},d=n.createContext(s);function t(e){const i=n.useContext(d);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),n.createElement(d.Provider,{value:i},e.children)}}}]);